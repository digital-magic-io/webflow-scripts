{"mappings":"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","sources":["src/src/types.ts","src/src/dom.ts","src/src/form.ts","src/src/config.ts","src/src/utils.ts","src/src/fetch.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,"import type { ButtonConfig, Config, FormConfig, PageContext } from './config'\nimport type { FailedValidationType, FormErrorMessages } from './types'\nimport type { DmForm } from './form'\nimport { createForm } from './form'\n\nexport { getTyped as apiGet, postTyped as apiPost, uploadTypedFileList as apiUploadFileList } from './fetch'\n\nconst setupForm = <T extends string>(\n  ctx: PageContext<T>,\n  formName: T,\n  formConfig: FormConfig<T>,\n  globalErrorMessages: FormErrorMessages\n): DmForm<T> => {\n  console.debug('Form:', formName, formConfig)\n  const form = createForm(formConfig.selector, formName, { ...globalErrorMessages, ...formConfig.errorMessages })\n  form.setOnSubmit(() => {\n    console.log('Form submitted:', formName, form.fields)\n    formConfig.onSubmit(\n      form.getFormValues(),\n      ctx,\n      () => formConfig.onSuccess(ctx),\n      (fail) => formConfig.onError(fail, ctx)\n    )\n  })\n  form.el.setAttribute('novalidate', 'true')\n  return form\n}\n\nconst defaultErrors: Record<FailedValidationType, string> = {\n  required: 'This field is required',\n  minlength: 'Field length is too small',\n  maxlength: 'Field length is too big',\n  pattern: 'Field does not match the pattern',\n  min: 'Field value is too small',\n  max: 'Field value is too big'\n}\n\nexport const init = <F extends string, B extends string>(conf: Config<F, B>): void => {\n  console.log('Initializing...', conf)\n\n  const ctx: PageContext<F> = {\n    forms: {}\n  } as PageContext<F>\n\n  if (conf.forms) {\n    // TODO: Update foreach to map or reduce\n    Object.entries<FormConfig<F>>(conf.forms).forEach(([formName, formConfig]) => {\n      ctx.forms[formName as F] = setupForm<F>(\n        ctx,\n        formName as F,\n        formConfig,\n        conf.errorMessages ?? defaultErrors\n      ) satisfies DmForm<F>\n    })\n    if (conf.buttons) {\n      Object.entries<ButtonConfig<F>>(conf.buttons).forEach(([, buttonConfig]) => {\n        const button: HTMLElement | null = document.querySelector(buttonConfig.selector)\n        if (button) {\n          button.addEventListener('click', () => buttonConfig.onClick(ctx))\n        } else {\n          console.error('Button not found by selector:', buttonConfig.selector)\n        }\n      })\n    }\n\n    console.log('Initialized with context: ', ctx)\n  }\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}