{"mappings":"AEAA,kBAAyB;IACvB,UAAU,EAAE;QACV,IAAI,EAAE,MAAM,CAAA;QACZ,QAAQ,EAAE,MAAM,CAAA;QAChB,OAAO,EAAE,MAAM,CAAA;QACf,QAAQ,EAAE,MAAM,CAAA;QAChB,QAAQ,EAAE,MAAM,CAAA;QAChB,SAAS,EAAE,MAAM,CAAA;KAClB,CAAA;IACD,WAAW,EAAE;QACX,WAAW,EAAE;YACX,IAAI,EAAE,MAAM,CAAA;YACZ,QAAQ,EAAE,MAAM,CAAA;YAChB,cAAc,EAAE,MAAM,CAAA;YACtB,SAAS,EAAE,MAAM,CAAA;SAClB,CAAA;QACD,IAAI,EAAE,MAAM,CAAA;QACZ,QAAQ,EAAE,MAAM,CAAA;QAChB,OAAO,EAAE,MAAM,CAAA;QACf,QAAQ,EAAE,MAAM,CAAA;QAChB,OAAO,EAAE,MAAM,CAAA;QACf,UAAU,EAAE,MAAM,CAAA;QAClB,WAAW,EAAE,MAAM,CAAA;QACnB,QAAQ,EAAE,MAAM,CAAA;QAChB,UAAU,EAAE,MAAM,CAAA;QAClB,SAAS,EAAE,MAAM,CAAA;KAClB,CAAA;IACD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM,CAAA;QACZ,QAAQ,EAAE,MAAM,CAAA;QAChB,UAAU,EAAE,MAAM,CAAA;QAClB,SAAS,EAAE,MAAM,CAAA;KAClB,CAAA;IACD,UAAU,EAAE,MAAM,CAAA;CACnB,CAAA;AAED,uBAA8B;IAC5B,OAAO,EAAE;QACP,KAAK,EAAE,MAAM,CAAA;QACb,UAAU,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAA;QAClC,UAAU,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAA;KACnC,CAAA;IACD,QAAQ,EAAE,UAAU,CAAA;CACrB,CAAA;AC8FD,OAAO,MAAM,aAAc,eAAe,KAAG,IAS5C,CAAA","sources":["src/src/api.ts","src/src/wfdom.ts","src/src/wfconfig.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,"import {\n  apiGetCar,\n  apiGetClient,\n  apiPostBuyout,\n  apiPostClient,\n  apiUploadFile,\n  BuyoutRequest,\n  ClientRequest,\n  fromFileList,\n  uploadFilesList\n} from './api'\nimport { getInput, setMsg, setInput, setupFormHandler } from './wfdom'\nimport { WfConfiguration } from './wfconfig'\n\ntype State = {\n  form: Partial<BuyoutRequest>\n}\n\n// TODO: Use functional State pattern\nconst state: State = {\n  form: {}\n}\n\nconst handleSubmitClient =\n  (stepper: WfConfiguration['stepper'], f: WfConfiguration['elements']['stepClient']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const client: ClientRequest = {\n      formType: 'BUYOUT',\n      name: getInput(f.txtName)?.value ?? '',\n      email: getInput(f.txtEmail)?.value ?? '',\n      phoneNumber: getInput(f.txtPhone)?.value ?? '',\n      language: 'et'\n    }\n    if (client.name && client.email && client.phoneNumber) {\n      void apiPostClient(client)\n        .then(() => {\n          stepper.nextStepFn(1)\n        })\n        .catch((error) => {\n          console.error('API error:', error)\n          setMsg(f.msgError, 'Unable to send client data!')\n        })\n    } else {\n      setMsg(f.msgError, 'All fields must be filled!')\n    }\n  }\n\nconst handleSubmitSearchVehicle =\n  (f: WfConfiguration['elements']['stepVehicle']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.plateNumber.msgError, '')\n    const plateNumber = getInput(f.plateNumber.txtPlateNumber)?.value\n    if (plateNumber && plateNumber.length > 0) {\n      console.log('Plate number:', plateNumber)\n      apiGetCar(plateNumber)\n        .then((response) => {\n          console.log('Car response:', response)\n          setInput(f.txtMake, response.mark)\n          setInput(f.txtModel, response.model)\n          setInput(f.txtYear, String(response.firstRegYear))\n          //setInput(f.txtMileage, )\n          //setInput(f.txtLocation, )\n          //setInput(f.txtPrice)\n          //setInput()\n        })\n        .catch((error) => {\n          console.error('Car error:', error)\n          setMsg(f.plateNumber.msgError, 'Car not found!')\n        })\n    } else {\n      setMsg(f.plateNumber.msgError, 'Plate number must be filled!')\n    }\n  }\n\nconst handleSubmitVehicle =\n  (stepper: WfConfiguration['stepper'], f: WfConfiguration['elements']['stepVehicle']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const make = getInput(f.txtMake)?.value\n    const model = getInput(f.txtModel)?.value\n    const year = getInput(f.txtYear)?.value\n    const mileage = getInput(f.txtMileage)?.value\n    const location = getInput(f.txtLocation)?.value\n    const price = getInput(f.txtPrice)?.value\n    const message = getInput(f.txtMessage)?.value\n    const plateNumber = getInput(f.plateNumber.txtPlateNumber)?.value\n    if (make && model && year && mileage && price && plateNumber) {\n      const request: BuyoutRequest = {\n        registrationNumber: plateNumber,\n        fuelId: 1,\n        transmissionId: 1,\n        imageIds: [],\n        make,\n        model,\n        year: Number(year), // TODO: Use safe parse\n        mileage: Number(mileage),\n        location,\n        requestedPrice: Number(price),\n        additionalInfo: message\n      }\n      console.log(`Submitted: request=${JSON.stringify(request)}`)\n      state.form = request\n      console.log(`State updated: ${JSON.stringify(state)}`)\n      stepper.nextStepFn(2)\n    } else {\n      setMsg(f.msgError, 'All vehicle fields must be filled except message!')\n    }\n  }\n\nconst handleSubmitFiles =\n  (f: WfConfiguration['elements']['stepFiles'], msgSuccess: string) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const files = getInput(f.inputFiles)?.files\n    if (files && files.length > 0) {\n      console.log('Files:', files)\n      const uploadFiles = uploadFilesList(apiUploadFile)\n      void uploadFiles(fromFileList(files)).then((response) => {\n        state.form.imageIds = response.map((v) => v.fileId)\n        console.log(`State updated: ${JSON.stringify(state)}`)\n        void apiPostBuyout(state.form as BuyoutRequest).then(() => {\n          console.log('Success!')\n          setMsg(msgSuccess, 'Great success!')\n        })\n      })\n    } else if (files && files.length > 10) {\n      setMsg(f.msgError, 'Too many files selected!')\n    } else {\n      setMsg(f.msgError, 'Files must be selected!')\n    }\n  }\n\nexport const init = (conf: WfConfiguration): void => {\n  console.log('Initializing...', conf)\n  void apiGetClient().then((client) => {\n    console.log('Client', client)\n    setupFormHandler(conf.elements.stepClient.form, handleSubmitClient(conf.stepper, conf.elements.stepClient))\n    setupFormHandler(conf.elements.stepVehicle.plateNumber.form, handleSubmitSearchVehicle(conf.elements.stepVehicle))\n    setupFormHandler(conf.elements.stepVehicle.form, handleSubmitVehicle(conf.stepper, conf.elements.stepVehicle))\n    setupFormHandler(conf.elements.stepFiles.form, handleSubmitFiles(conf.elements.stepFiles, conf.elements.msgSuccess))\n  })\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}