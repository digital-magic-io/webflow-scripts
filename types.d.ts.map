{"mappings":"AAAA,gBAAuB;IASrB,OAAO,EAAE;QACP,KAAK,EAAE,MAAM,CAAA;QACb,UAAU,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAA;QAClC,UAAU,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAA;KACnC,CAAA;IACD,KAAK,EAAE;QACL,MAAM,EAAE,MAAM,CAAA;QACd,WAAW,EAAE,MAAM,CAAA;QACnB,OAAO,EAAE,MAAM,CAAA;QACf,KAAK,EAAE,MAAM,CAAA;KACd,CAAA;CACF,CAAA;AMsJD,OAAO,MAAM,aAAc,QAAQ,KAAG,IAkCrC,CAAA","sources":["src/src/dmconfig.ts","src/src/api.ts","src/src/dmtypes.ts","src/src/dmdom.ts","src/src/dmform.ts","src/src/validators.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,"import { DmConfig } from './dmconfig'\nimport {\n  apiGetCar,\n  apiPostBuyout,\n  apiPostClient,\n  apiUploadFile,\n  BuyoutRequest,\n  ClientRequest,\n  ClientResponse,\n  fromFileList,\n  uploadFilesList\n} from './api'\nimport { getForm } from './dmdom'\nimport { validateEmail, validateNonEmpty } from './validators'\nimport { createFormInstance, DmFormInstance } from './dmform'\nimport { StateStorage } from './dmtypes'\n\ntype State = Readonly<{\n  client: ClientResponse | undefined\n  form: Partial<BuyoutRequest>\n}>\n\ntype AppStateStorage = StateStorage<State>\n\ntype ClientFormInstance = DmFormInstance<'name' | 'email' | 'phone'>\ntype FindVehicleFormInstance = DmFormInstance<'plateNumber'>\ntype VehicleFormInstance = DmFormInstance<'make' | 'model' | 'year' | 'mileage' | 'location' | 'price' | 'message'>\ntype FilesFormInstance = DmFormInstance<'files'>\n\nconst handleSubmitClient =\n  (conf: DmConfig, storage: AppStateStorage, form: ClientFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const name = validateNonEmpty(form.fields.name)\n    const email = validateEmail(form.fields.email)\n    const phoneNumber = validateNonEmpty(form.fields.phone)\n\n    if (!name || !email || !phoneNumber) {\n      return\n    }\n\n    const client: ClientRequest = {\n      formType: 'BUYOUT',\n      name,\n      email,\n      phoneNumber,\n      language: 'et'\n    }\n\n    void apiPostClient(client)\n      .then((resp) => {\n        storage.setState({ ...storage.state, client: resp })\n        console.log(`State updated: ${JSON.stringify(storage)}`)\n        conf.stepper.nextStepFn(1)\n      })\n      .catch((error) => {\n        console.error('API error:', error)\n        form.setError('Unable to send client data!')\n      })\n  }\n\nconst handleSubmitSearchVehicle =\n  (form: FindVehicleFormInstance, vehicleForm: VehicleFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const plateNumber = validateNonEmpty(form.fields.plateNumber)\n\n    if (!plateNumber) {\n      return\n    }\n\n    console.log('Plate number:', plateNumber)\n\n    apiGetCar(plateNumber)\n      .then((response) => {\n        console.log('Car response:', response)\n        vehicleForm.fields.make.setInputValue(response.mark)\n        vehicleForm.fields.model.setInputValue(response.model)\n        vehicleForm.fields.year.setInputValue(String(response.firstRegYear))\n        vehicleForm.show()\n      })\n      .catch((error) => {\n        console.error('Car error:', error)\n        form.fields.plateNumber.setError('Car not found!')\n      })\n  }\n\nconst handleSubmitVehicle =\n  (conf: DmConfig, form: VehicleFormInstance, storage: AppStateStorage) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const make = validateNonEmpty(form.fields.make)\n    const model = validateNonEmpty(form.fields.model)\n    const year = validateNonEmpty(form.fields.year)\n    const mileage = validateNonEmpty(form.fields.mileage)\n    const location = form.fields.location?.input.el.value\n    const price = validateNonEmpty(form.fields.price)\n    const message = form.fields.message?.input.el.value\n\n    if (!make || !model || !year || !mileage || !price) {\n      return\n    }\n\n    if (storage.state.form.plateNumber === undefined) {\n      throw new Error('Plate number is not set!')\n    }\n\n    const request: BuyoutRequest = {\n      plateNumber: storage.state.form.plateNumber,\n      make,\n      model,\n      year: Number(year),\n      mileage: Number(mileage),\n      location,\n      price: Number(price),\n      additionalInfo: message,\n      photoIds: []\n    }\n    console.log(`Submitted: request=${JSON.stringify(request)}`)\n    console.log(`State updated: ${JSON.stringify(storage)}`)\n    conf.stepper.nextStepFn(2)\n  }\n\nconst handleSubmitFiles =\n  (conf: DmConfig, storage: AppStateStorage, form: FilesFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const files = form.fields.files.input.el.files\n\n    if (!files || files.length === 0) {\n      form.fields.files.setError('Files must be selected!')\n      return\n    } else if (files && files.length > 10) {\n      form.fields.files.setError('Maximum 10 files allowed!')\n      return\n    }\n\n    console.log('Files:', files)\n    const uploadFiles = uploadFilesList(apiUploadFile)\n    void uploadFiles(fromFileList(files)).then((response) => {\n      const photoIds = response.map((v) => v.fileId)\n      storage.setState({ ...storage.state, form: { ...storage.state.form, photoIds } })\n      console.log(`State updated: ${JSON.stringify(storage)}`)\n      if (storage.state.client) {\n        void apiPostBuyout(storage.state.client.personalDataId, storage.state.form as BuyoutRequest).then(() => {\n          console.log('Success!')\n          conf.stepper.nextStepFn(3)\n        })\n      } else {\n        form.setError('Client is not set!')\n      }\n    })\n  }\n\nconst initForm = <T extends string>(name: string, fieldNames: Array<T>): DmFormInstance<T> | undefined => {\n  const form = getForm(name)\n  if (form) {\n    //form.setOnSubmit(handler(form))\n    return createFormInstance(form, fieldNames)\n  } else {\n    // eslint-disable-next-line no-console\n    console.error('Client form not found!')\n    return undefined\n  }\n}\n\nexport const init = (conf: DmConfig): void => {\n  console.log('Initializing...', conf)\n\n  const storage: AppStateStorage = {\n    state: {\n      client: undefined,\n      form: {}\n    },\n    setState(value: State): void {\n      storage.state = value\n    }\n  }\n\n  const clientForm: ClientFormInstance | undefined = initForm(conf.forms.client, ['name', 'email', 'phone'])\n  const findVehicleForm: FindVehicleFormInstance | undefined = initForm(conf.forms.findVehicle, ['plateNumber'])\n  const vehicleForm: VehicleFormInstance | undefined = initForm(conf.forms.vehicle, [\n    'make',\n    'model',\n    'year',\n    'mileage',\n    'location',\n    'price',\n    'message'\n  ])\n  const filesForm: FilesFormInstance | undefined = initForm(conf.forms.files, ['files'])\n\n  if (!clientForm || !findVehicleForm || !vehicleForm || !filesForm) {\n    throw new Error('Not all forms are found!')\n  }\n\n  clientForm.setOnSubmit(handleSubmitClient(conf, storage, clientForm))\n  findVehicleForm.setOnSubmit(handleSubmitSearchVehicle(findVehicleForm, vehicleForm))\n  vehicleForm.setOnSubmit(handleSubmitVehicle(conf, vehicleForm, storage))\n  filesForm.setOnSubmit(handleSubmitFiles(conf, storage, filesForm))\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}