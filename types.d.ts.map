{"mappings":"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","sources":["src/src/types.ts","src/src/dom.ts","src/src/form.ts","src/src/config.ts","src/src/utils.ts","src/src/fetch.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,"import type { ButtonConfig, Config, FormConfig, FormConfigHandlers, LabelConfig, PageContext } from './config'\nimport type { FailedValidationType, FormErrorMessages } from './types'\nimport type { DmButton, DmForm, DmLabel } from './form'\nimport { createButton, createForm, createLabel } from './form'\nimport { getElement } from './dom'\n\nexport {\n  getTyped as apiGet,\n  postTyped as apiPost,\n  uploadTypedFileList as apiUploadFileList,\n  getErrorFromResponse as apiGetErrorFromResponse,\n  ApiError\n} from './fetch'\n\nconst setupForm = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  formName: F,\n  formConfig: FormConfig<F, B, L>,\n  globalErrorMessages: FormErrorMessages,\n  handlers?: FormConfigHandlers\n): DmForm<F> => {\n  console.debug('Form:', formName, formConfig)\n  const form = createForm(formConfig.selector, formName, { ...globalErrorMessages, ...formConfig.errorMessages })\n  form.setOnSubmit(async () => {\n    console.log('Form submitted:', formName, form.fields)\n    handlers?.beforeSubmit?.(form)\n    await formConfig.onSubmit(\n      form.getFormValues(),\n      ctx,\n      () => formConfig.onSuccess(ctx),\n      (error) => formConfig.onError(error, ctx)\n    )\n    handlers?.afterSubmit?.(form)\n  })\n  form.el.setAttribute('novalidate', 'true')\n  return form\n}\n\nconst setupButton = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  buttonName: B,\n  buttonConfig: ButtonConfig<F, B, L>\n): DmButton => {\n  const button = getElement<HTMLButtonElement>(buttonConfig.selector)\n  if (button) {\n    button.addEventListener('click', () => buttonConfig.onClick(ctx))\n    const result = createButton(button)\n    ctx.buttons[buttonName] = result\n    return result\n  } else {\n    console.error('Button not found by selector:', buttonConfig.selector)\n  }\n}\n\nconst setupLabel = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  labelName: L,\n  labelConfig: LabelConfig\n): DmLabel => {\n  const label = getElement(labelConfig.selector)\n  if (label) {\n    const result = createLabel(label)\n    ctx.labels[labelName] = result\n    return result\n  } else {\n    console.error('Label not found by selector:', labelConfig.selector)\n  }\n}\n\nconst defaultErrors: Record<FailedValidationType, string> = {\n  required: 'This field is required',\n  minlength: 'Field length is too small',\n  maxlength: 'Field length is too big',\n  pattern: 'Field does not match the pattern',\n  min: 'Field value is too small',\n  max: 'Field value is too big'\n}\n\nexport const init = <F extends string, B extends string, L extends string>(conf: Config<F, B, L>): void => {\n  console.log('Initializing...', conf)\n\n  const ctx: PageContext<F, B, L> = {\n    forms: {}\n  } as PageContext<F, B, L>\n\n  if (conf.forms) {\n    // TODO: Update foreach to map or reduce\n    Object.entries<FormConfig<F, B, L>>(conf.forms).forEach(([formName, formConfig]) => {\n      ctx.forms[formName as F] = setupForm<F>(\n        ctx,\n        formName as F,\n        formConfig,\n        conf.errorMessages ?? defaultErrors,\n        conf.handlers\n      ) satisfies DmForm<F>\n    })\n    ctx.resetAll = () => {\n      Object.values<DmForm<string>>(ctx.forms).forEach((form) => form.resetForm())\n    }\n    if (conf.buttons) {\n      Object.entries<ButtonConfig<F, B, L>>(conf.buttons).forEach(([buttonName, buttonConfig]) => {\n        setupButton(ctx, buttonName as B, buttonConfig)\n      })\n    }\n    if (conf.labels) {\n      Object.entries(conf.labels).forEach(([labelName, labelConfig]) => {\n        setupLabel(ctx, labelName as L, labelConfig)\n      })\n    }\n\n    console.log('Initialized with context: ', ctx)\n  }\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}