{"mappings":"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","sources":["src/index.ts","src/form.ts","src/dom.ts","src/fetch.ts","src/utils.ts"],"sourcesContent":["import type { ButtonConfig, Config, FormConfig, FormConfigHandlers, LabelConfig, PageContext } from './config'\nimport type { FailedValidationType, FormErrorMessages } from './types'\nimport type { DmButton, DmForm, DmLabel } from './form'\nimport { createButton, createForm, createLabel } from './form'\nimport { getElement } from './dom'\n\nexport {\n  getTyped as apiGet,\n  postTyped as apiPost,\n  uploadTypedFileList as apiUploadFileList,\n  getErrorFromResponse as apiGetErrorFromResponse,\n  ApiError\n} from './fetch'\n\nconst setupForm = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  formName: F,\n  formConfig: FormConfig<F, B, L>,\n  globalErrorMessages: FormErrorMessages,\n  handlers?: FormConfigHandlers\n): DmForm<F> => {\n  console.debug('Form:', formName, formConfig)\n  const form = createForm(formConfig.selector, formName, { ...globalErrorMessages, ...formConfig.errorMessages })\n  form.setOnSubmit(async () => {\n    console.log('Form submitted:', formName, form.fields)\n    handlers?.beforeSubmit?.(form)\n    await formConfig.onSubmit(\n      form.getFormValues(),\n      ctx,\n      () => formConfig.onSuccess(ctx),\n      (error) => formConfig.onError(error, ctx)\n    )\n    handlers?.afterSubmit?.(form)\n  })\n  form.el.setAttribute('novalidate', 'true')\n  return form\n}\n\nconst setupButton = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  buttonName: B,\n  buttonConfig: ButtonConfig<F, B, L>\n): DmButton => {\n  const button = getElement<HTMLButtonElement>(buttonConfig.selector)\n  if (button) {\n    button.addEventListener('click', () => buttonConfig.onClick(ctx))\n    const result = createButton(button)\n    ctx.buttons[buttonName] = result\n    return result\n  } else {\n    throw new Error('Button not found by selector: ' + buttonConfig.selector)\n  }\n}\n\nconst setupLabel = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  labelName: L,\n  labelConfig: LabelConfig\n): DmLabel => {\n  const label = getElement(labelConfig.selector)\n  if (label) {\n    const result = createLabel(label)\n    ctx.labels[labelName] = result\n    return result\n  } else {\n    throw new Error('Label not found by selector: ' + labelConfig.selector)\n  }\n}\n\nconst defaultErrors: Record<FailedValidationType, string> = {\n  required: 'This field is required',\n  minlength: 'Field length is too small',\n  maxlength: 'Field length is too big',\n  pattern: 'Field does not match the pattern',\n  min: 'Field value is too small',\n  max: 'Field value is too big'\n}\n\nexport const init = <F extends string, B extends string, L extends string>(conf: Config<F, B, L>): void => {\n  console.log('Initializing...', conf)\n\n  const ctx: PageContext<F, B, L> = {\n    forms: {},\n    buttons: {},\n    labels: {}\n  } as PageContext<F, B, L>\n\n  if (conf.forms) {\n    // TODO: Update foreach to map or reduce\n    Object.entries<FormConfig<F, B, L>>(conf.forms).forEach(([formName, formConfig]) => {\n      ctx.forms[formName as F] = setupForm<F, B, L>(\n        ctx,\n        formName as F,\n        formConfig,\n        conf.errorMessages ?? defaultErrors,\n        conf.handlers\n      ) satisfies DmForm<F>\n    })\n    ctx.resetAll = () => {\n      Object.values<DmForm<string>>(ctx.forms).forEach((form) => form.resetForm())\n    }\n    if (conf.buttons) {\n      Object.entries<ButtonConfig<F, B, L>>(conf.buttons).forEach(([buttonName, buttonConfig]) => {\n        setupButton(ctx, buttonName as B, buttonConfig)\n      })\n    }\n    if (conf.labels) {\n      Object.entries<LabelConfig>(conf.labels).forEach(([labelName, labelConfig]) => {\n        setupLabel(ctx, labelName as L, labelConfig)\n      })\n    }\n\n    console.log('Initialized with context: ', ctx)\n  }\n}\n","import type { FN, FormErrorMessages, Handler, Validator } from './types'\nimport { getElement, getFormElement, getInputElement, setupFormHandler } from './dom'\n\nclass FormError extends Error {\n  parent?: HTMLElement\n\n  constructor(message: string, parent?: HTMLElement) {\n    super(message)\n    Object.setPrototypeOf(this, new.target.prototype)\n    this.parent = parent\n  }\n\n  public toString(): string {\n    return this.message + ' Parent: [' + JSON.stringify(parent) + ']'\n  }\n}\n\ntype DmElement<T extends HTMLElement> = {\n  el: T\n}\n\nexport type DmButton = DmElement<HTMLButtonElement> & {\n  setLabel: Handler<string>\n  setDisabled: Handler<boolean>\n}\n\nexport type DmLabel = DmElement<HTMLElement> & {\n  setLabel: Handler<string>\n}\n\nexport type DmField = DmElement<HTMLElement> & {\n  input: DmElement<HTMLInputElement>\n  error: DmElement<HTMLElement>\n  validator: Validator\n  clearError: Handler<void>\n  setError: Handler<string>\n  // TODO: Value may be string | number\n  setInputValue: Handler<string>\n}\n\nexport type DmForm<T extends string> = DmElement<HTMLElement> & {\n  fields: Record<T, DmField>\n  error: DmElement<HTMLElement>\n  clearError: Handler<void>\n  clearAllErrors: Handler<void>\n  setError: Handler<string>\n  // TODO: Value may be string | number\n  getFormValues: FN<void, Record<T, string>>\n  setFormValues: Handler<Record<T, string>>\n  resetForm: Handler<void>\n  setFormDisabled: Handler<boolean>\n  setOnSubmit: FN<FN<Event, Promise<void>>, void>\n}\n\nconst scanFormFieldNames = (formElement: HTMLFormElement): ReadonlyArray<string> => {\n  // TODO: Field selector must be configurable\n  const formFieldElements = formElement.querySelectorAll('[data-dm-type=\"control\"]')\n  return Array.from(formFieldElements.values())\n    .map((el) => el.getAttribute('data-dm-name'))\n    .filter((name): name is string => !!name)\n}\n\nconst createFormError = (formElement: HTMLFormElement): HTMLElement => {\n  // TODO: Error selector must be configurable\n  const element = getElement('[data-dm-name=\"form_error\"]', formElement)\n  if (!element) {\n    throw new FormError('Form error element not found for form', formElement)\n  }\n  return element\n}\n\nconst createFieldInput = (fieldElement: HTMLElement): HTMLInputElement => {\n  // TODO: Field input selector must be configurable\n  const element = getInputElement('[data-dm-type=\"input\"]', fieldElement)\n  if (!element) {\n    throw new FormError('Form input element not found for: ', fieldElement)\n  }\n  return element\n}\n\nconst createFieldError = (fieldElement: HTMLElement): HTMLElement => {\n  // TODO: Field error selector must be configurable\n  const element = getElement('[data-dm-type=\"error\"]', fieldElement)\n  if (!element) {\n    throw new FormError('Form error element not found for: ', fieldElement)\n  }\n  return element\n}\n\nconst createFieldValidation = (inputElement: HTMLInputElement): Validator => {\n  const required = inputElement.hasAttribute('required')\n  const minLength = inputElement.getAttribute('minlength')\n  const maxLength = inputElement.getAttribute('maxlength')\n  const pattern = inputElement.getAttribute('pattern')\n  const min = inputElement.getAttribute('min')\n  const max = inputElement.getAttribute('max')\n\n  return (value) => {\n    if (required && !value) {\n      return 'required'\n    }\n    if (minLength && String(value).length < Number(minLength)) {\n      return 'minlength'\n    }\n    if (maxLength && String(value).length > Number(maxLength)) {\n      return 'maxlength'\n    }\n    if (pattern && !new RegExp(pattern).test(String(value))) {\n      return 'pattern'\n    }\n    if (min && Number(value) < Number(min)) {\n      return 'min'\n    }\n    if (max && Number(value) > Number(max)) {\n      return 'max'\n    }\n    return true\n  }\n}\n\nconst createFormField = (formElement: HTMLFormElement, name: string): DmField => {\n  // TODO: Field selector must be configurable\n  const fieldElement = getElement(`[data-dm-name=\"${name}\"]`, formElement)\n  if (!fieldElement) {\n    throw new FormError('Form field element not found by name: \"' + name, formElement)\n  }\n  const inputElement = createFieldInput(fieldElement)\n  const errorElement = createFieldError(fieldElement)\n  const validator: Validator = createFieldValidation(inputElement)\n\n  return {\n    el: fieldElement,\n    input: { el: inputElement },\n    error: { el: errorElement },\n    validator: validator,\n    clearError: () => (errorElement.textContent = ''),\n    setError: (error: string) => (errorElement.textContent = error),\n    setInputValue: (value: string) => (inputElement.value = value)\n  } satisfies DmField\n}\n\nexport const createForm = <T extends string>(\n  selector: string,\n  formName: T,\n  formErrorMessages: FormErrorMessages\n): DmForm<T> => {\n  console.debug('Creating form:', formName, selector)\n  const formElement = getFormElement(selector)\n  if (!formElement) {\n    throw new Error('Form element not found by selector: ' + selector)\n  }\n\n  // TODO: Must be optional!\n  const formErrorElement = createFormError(formElement)\n\n  const fieldNames = scanFormFieldNames(formElement)\n  console.debug('Fields scanned:', fieldNames)\n\n  const fieldElements: Record<string, DmField> = fieldNames\n    .map((name) => createFormField(formElement, name))\n    .reduce((acc, cur) => ({ ...acc, [cur.input.el.name]: cur }), {})\n\n  const getFormValues = (): Record<T, string> =>\n    Object.entries<DmField>(fieldElements)\n      .filter(([, instance]) => !!instance && instance.input.el.value.trim().length > 0)\n      .map(([name, instance]) => ({ [name]: instance.input.el.value }))\n      .reduce((acc, cur) => ({ ...acc, ...cur }), {}) as Record<T, string>\n\n  const setFormValues = (values: Record<T, string>): void => {\n    Object.entries<string>(values).forEach(([name, value]) => {\n      if (fieldElements[name]) {\n        fieldElements[name].setInputValue(value)\n      }\n    })\n  }\n\n  const resetForm = (): void => {\n    Object.values(fieldElements).forEach((field) => field.setInputValue(''))\n  }\n\n  const setFormDisabled = (disabled: boolean): void => {\n    Object.values(fieldElements).forEach((field) => (field.input.el.disabled = disabled))\n\n    Array.from(formElement.querySelectorAll('[data-dm-type=\"button\"]')).forEach((element) => {\n      if (element instanceof HTMLButtonElement) {\n        element.disabled = disabled\n      }\n      // Add \"disabled\" class to an element\n      if (disabled) {\n        element.classList.add('disabled')\n      } else {\n        element.classList.remove('disabled')\n      }\n    })\n  }\n\n  const setOnSubmit = (handler: (e: Event) => void): void =>\n    setupFormHandler(formElement, (e) => {\n      const errors = Object.entries(fieldElements)\n        .map(([name, field]) => ({ [name]: field.validator(field.input.el.value) }))\n        .reduce((acc, cur) => ({ ...acc, ...cur }), {})\n      const hasErrors = Object.values(errors).some((error) => error !== true)\n      if (hasErrors) {\n        console.error('Validation errors', errors)\n        Object.entries(errors).forEach(([name, error]) => {\n          if (error !== true) {\n            fieldElements[name].setError(formErrorMessages[error])\n          }\n        })\n        //formErrorElement.textContent = 'Form has errors!'\n      } else {\n        handler(e)\n      }\n    })\n\n  // TODO: Avoid this duplication\n  Array.from(formElement.querySelectorAll('[data-dm-disable=\"true\"]')).forEach((element) => {\n    if (element instanceof HTMLButtonElement) {\n      element.disabled = true\n    }\n    element.classList.add('disabled')\n  })\n\n  return {\n    el: formElement,\n    fields: fieldElements,\n    error: { el: formErrorElement },\n    clearError: () => (formErrorElement.textContent = ''),\n    clearAllErrors: () => {\n      formErrorElement.textContent = ''\n      Object.values(fieldElements).forEach((field) => field.clearError())\n    },\n    setError: (error: string) => (formErrorElement.textContent = error),\n    getFormValues,\n    setFormValues,\n    resetForm,\n    setFormDisabled,\n    setOnSubmit\n  }\n}\n\nexport const createButton = (buttonElement: HTMLButtonElement): DmButton =>\n  ({\n    el: buttonElement,\n    setLabel: (label: string) => (buttonElement.textContent = label),\n    setDisabled: (disabled: boolean) => (buttonElement.disabled = disabled)\n  }) satisfies DmButton\n\nexport const createLabel = (labelElement: HTMLElement): DmLabel =>\n  ({\n    el: labelElement,\n    setLabel: (label: string) => (labelElement.textContent = label)\n  }) satisfies DmLabel\n","export const getElement = <T extends HTMLElement = HTMLElement>(\n  selector: string,\n  parent?: HTMLElement\n): T | undefined => {\n  const el: HTMLElement | null = (parent ?? document).querySelector(selector)\n  if (el === null) {\n    console.error(`Element not found by selector: ${parent ? 'parent' : 'document'}.${selector}.`)\n    return undefined\n  } else {\n    return el as T\n  }\n}\n\nexport const getFormElement = (selector: string): HTMLFormElement | undefined => getElement<HTMLFormElement>(selector)\n\nexport const getInputElement = (selector: string, parent?: HTMLElement): HTMLInputElement | undefined =>\n  getElement<HTMLInputElement>(selector, parent)\n\nexport const setupFormHandler = (form: HTMLFormElement, handler: (e: Event) => void): void => {\n  form.action = ''\n  form.method = ''\n  form.onsubmit = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  // TODO: Remove all event listeners\n  form.addEventListener('submit', handler)\n}\n","import type { FN, Handler, NullableType } from './types'\nimport { hasValue } from './utils'\n\nexport class ApiError extends Error {\n  public readonly status: number\n  public readonly url: string\n  public readonly method: string\n  public readonly cause: string\n  public readonly response: Response\n\n  constructor(response: Response, cause: string) {\n    super(`Failed to fetch ${response.url}: ${response.status} ${response.statusText}: ${cause}`)\n    this.status = response.status\n    this.url = response.url\n    this.method = response.statusText\n    this.cause = cause\n    this.response = response\n  }\n}\n\nexport const getErrorFromResponse = async <T>(response: Response): Promise<T> => {\n  const responseText = await response.text()\n  console.log('Error body: ', responseText)\n  if (!responseText || responseText.length === 0) {\n    return undefined as unknown as T\n  } else {\n    return JSON.parse(responseText) as T\n  }\n}\n\nexport const fetchTyped = async <T>(url: string, init: RequestInit = { method: 'GET' }): Promise<T> => {\n  const response = await fetch(url, init)\n  if (!response.ok) {\n    throw new ApiError(response, 'Unsuccessful HTTP status')\n  } else {\n    const responseText = await response.text()\n    if (!responseText || responseText.length === 0) {\n      return undefined as unknown as Promise<T>\n    } else {\n      return JSON.parse(responseText) as Promise<T>\n    }\n  }\n}\n\nexport const getTyped = async <T>(url: string): Promise<T> => fetchTyped(url)\n\nexport const postTyped = async <T, R>(url: string, body: T): Promise<R> =>\n  fetchTyped(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n\nexport const uploadTyped =\n  <R>(url: string) =>\n  (file: File): Promise<R> => {\n    const data = new FormData()\n    data.append('file', file)\n\n    return fetchTyped<R>(url, {\n      method: 'POST',\n      body: data\n    })\n  }\n\nexport const fromFileList = (files: NullableType<FileList>): Array<File> => {\n  const result: Array<File> = []\n  if (hasValue(files)) {\n    for (const file of files) {\n      result.push(file)\n    }\n  }\n  return result\n}\n\nexport const uploadFilesList =\n  <TUploadResult>(\n    upload: FN<File, Promise<TUploadResult>>,\n    onFileUploadSuccess?: Handler<void>,\n    onFileUploadError?: Handler<unknown>\n  ): FN<Array<File>, Promise<Array<TUploadResult>>> =>\n  (files) =>\n    Promise.all(\n      files.map((file) =>\n        upload(file)\n          .then((result) => {\n            onFileUploadSuccess?.()\n            return result\n          })\n          .catch((e: unknown) => {\n            // eslint-disable-next-line no-console\n            console.error('File upload error', e)\n            onFileUploadError?.(e)\n            return undefined\n          })\n      )\n    ).then((result) => result.filter(hasValue))\n\nexport const uploadTypedArray = <R>(url: string, files: Array<File>): Promise<Array<R>> =>\n  uploadFilesList<R>(uploadTyped<R>(url))(files)\n\nexport const uploadTypedFileList = <R>(url: string, files: FileList): Promise<Array<R>> =>\n  uploadTypedArray<R>(url, fromFileList(files))\n","import type { NullableType } from './types'\n\nexport const isEmpty = <T>(value: NullableType<T>): value is null | undefined => value === null || value === undefined\nexport const hasValue = <T>(value: NullableType<T>): value is T => !isEmpty(value)\n"],"names":[],"version":3,"file":"main.js.map"}