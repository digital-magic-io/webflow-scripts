{"mappings":"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","sources":["src/index.ts","src/api.ts","src/dmdom.ts","src/dmtypes.ts","src/validators.ts","src/dmform.ts"],"sourcesContent":["import { DmConfig } from './dmconfig'\nimport {\n  apiGetCar,\n  apiPostBuyout,\n  apiPostClient,\n  apiUploadFile,\n  BuyoutRequest,\n  ClientRequest,\n  ClientResponse,\n  fromFileList,\n  uploadFilesList\n} from './api'\nimport { getForm } from './dmdom'\nimport { validateEmail, validateNonEmpty } from './validators'\nimport { createFormInstance, DmFormInstance } from './dmform'\nimport { StateStorage } from './dmtypes'\n\ntype State = Readonly<{\n  client: ClientResponse | undefined\n  form: Partial<BuyoutRequest>\n}>\n\ntype AppStateStorage = StateStorage<State>\n\ntype ClientFormInstance = DmFormInstance<'name' | 'email' | 'phone'>\ntype FindVehicleFormInstance = DmFormInstance<'plateNumber'>\ntype VehicleFormInstance = DmFormInstance<'make' | 'model' | 'year' | 'mileage' | 'location' | 'price' | 'message'>\ntype FilesFormInstance = DmFormInstance<'files'>\n\nconst handleSubmitClient =\n  (conf: DmConfig, storage: AppStateStorage, form: ClientFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const name = validateNonEmpty(form.fields.name)\n    const email = validateEmail(form.fields.email)\n    const phoneNumber = validateNonEmpty(form.fields.phone)\n\n    if (!name || !email || !phoneNumber) {\n      return\n    }\n\n    const client: ClientRequest = {\n      formType: 'BUYOUT',\n      name,\n      email,\n      phoneNumber,\n      language: 'et'\n    }\n\n    void apiPostClient(client)\n      .then((resp) => {\n        storage.setState({ ...storage.state, client: resp })\n        console.log(`State updated: ${JSON.stringify(storage)}`)\n        conf.stepper.nextStepFn(1)\n      })\n      .catch((error) => {\n        console.error('API error:', error)\n        form.setError('Unable to send client data!')\n      })\n  }\n\nconst handleSubmitSearchVehicle =\n  (storage: AppStateStorage, form: FindVehicleFormInstance, vehicleForm: VehicleFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const plateNumber = validateNonEmpty(form.fields.plateNumber)\n\n    if (!plateNumber) {\n      return\n    }\n\n    console.log('Plate number:', plateNumber)\n\n    apiGetCar(plateNumber)\n      .then((response) => {\n        console.log('Car response:', response)\n        vehicleForm.fields.make.setInputValue(response.mark)\n        vehicleForm.fields.model.setInputValue(response.model)\n        vehicleForm.fields.year.setInputValue(String(response.firstRegYear))\n        storage.setState({ ...storage.state, form: { ...storage.state.form, plateNumber } })\n        console.log(`State updated: ${JSON.stringify(storage)}`)\n        vehicleForm.show()\n      })\n      .catch((error) => {\n        console.error('Car error:', error)\n        form.fields.plateNumber.setError('Car not found!')\n      })\n  }\n\nconst handleSubmitVehicle =\n  (conf: DmConfig, storage: AppStateStorage, form: VehicleFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const make = validateNonEmpty(form.fields.make)\n    const model = validateNonEmpty(form.fields.model)\n    const year = validateNonEmpty(form.fields.year)\n    const mileage = validateNonEmpty(form.fields.mileage)\n    const location = form.fields.location?.input.el.value\n    const price = validateNonEmpty(form.fields.price)\n    const message = form.fields.message?.input.el.value\n\n    if (!make || !model || !year || !mileage || !price) {\n      return\n    }\n\n    if (storage.state.form.plateNumber === undefined) {\n      throw new Error('Plate number is not set!')\n    }\n\n    const request: BuyoutRequest = {\n      plateNumber: storage.state.form.plateNumber,\n      make,\n      model,\n      year: Number(year),\n      mileage: Number(mileage),\n      location,\n      price: Number(price),\n      additionalInfo: message,\n      photoIds: []\n    }\n    console.log(`Submitted: request=${JSON.stringify(request)}`)\n    storage.setState({ ...storage.state, form: request })\n    console.log(`State updated: ${JSON.stringify(storage)}`)\n    conf.stepper.nextStepFn(2)\n  }\n\nconst handleSubmitFiles =\n  (conf: DmConfig, storage: AppStateStorage, form: FilesFormInstance) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    form.clearAllErrors()\n    const files = form.fields.files.input.el.files\n\n    if (!files || files.length === 0) {\n      form.fields.files.setError('Files must be selected!')\n      return\n    } else if (files && files.length > 10) {\n      form.fields.files.setError('Maximum 10 files allowed!')\n      return\n    }\n\n    console.log('Files:', files)\n    const uploadFiles = uploadFilesList(apiUploadFile)\n    void uploadFiles(fromFileList(files)).then((response) => {\n      const photoIds = response.map((v) => v.fileId)\n      storage.setState({ ...storage.state, form: { ...storage.state.form, photoIds } })\n      console.log(`State updated: ${JSON.stringify(storage)}`)\n      if (storage.state.client) {\n        void apiPostBuyout(storage.state.client.personalDataId, storage.state.form as BuyoutRequest).then(() => {\n          console.log('Success!')\n          conf.stepper.nextStepFn(3)\n        })\n      } else {\n        form.setError('Client is not set!')\n      }\n    })\n  }\n\nconst initForm = <T extends string>(name: string, fieldNames: Array<T>): DmFormInstance<T> | undefined => {\n  const form = getForm(name)\n  if (form) {\n    //form.setOnSubmit(handler(form))\n    return createFormInstance(form, fieldNames)\n  } else {\n    // eslint-disable-next-line no-console\n    console.error('Client form not found!')\n    return undefined\n  }\n}\n\nexport const init = (conf: DmConfig): void => {\n  console.log('Initializing...', conf)\n\n  const storage: AppStateStorage = {\n    state: {\n      client: undefined,\n      form: {}\n    },\n    setState(value: State): void {\n      storage.state = value\n    }\n  }\n\n  const clientForm: ClientFormInstance | undefined = initForm(conf.forms.client, ['name', 'email', 'phone'])\n  const findVehicleForm: FindVehicleFormInstance | undefined = initForm(conf.forms.findVehicle, ['plateNumber'])\n  const vehicleForm: VehicleFormInstance | undefined = initForm(conf.forms.vehicle, [\n    'make',\n    'model',\n    'year',\n    'mileage',\n    'location',\n    'price',\n    'message'\n  ])\n  const filesForm: FilesFormInstance | undefined = initForm(conf.forms.files, ['files'])\n\n  if (!clientForm || !findVehicleForm || !vehicleForm || !filesForm) {\n    throw new Error('Not all forms are found!')\n  }\n\n  clientForm.setOnSubmit(handleSubmitClient(conf, storage, clientForm))\n  findVehicleForm.setOnSubmit(handleSubmitSearchVehicle(storage, findVehicleForm, vehicleForm))\n  vehicleForm.setOnSubmit(handleSubmitVehicle(conf, storage, vehicleForm))\n  filesForm.setOnSubmit(handleSubmitFiles(conf, storage, filesForm))\n}\n","type Language = 'et' | 'ru' | 'en'\n\ntype FormType = 'BUYOUT'\n\nexport type ClientPersonalData = {\n  name: string\n  email: string\n  phoneNumber: string\n  language: Language\n}\n\nexport type ClientRequest = {\n  formType: FormType\n} & ClientPersonalData\n\nexport type ClientResponse = {\n  personalDataId: string\n}\n\nexport type FileUploadResponse = {\n  fileId: string\n}\n\nexport type VehicleMntSearchResponse = {\n  engine?: {\n    type: 'FUELS'\n    value: number\n  }\n  engineVolCm3?: number\n  engineKw?: number\n  firstRegYear?: number\n  mark: string\n  model: string\n  nextInspectionDate?: string\n  transmission?: {\n    type: 'TRANSMISSIONS'\n    value: number\n  }\n  registrationNumber?: string\n}\n\nexport type BuyoutRequest = {\n  plateNumber: string\n  make: string\n  model: string\n  year: number\n  mileage: number\n  location?: string\n  price: number\n  additionalInfo?: string\n  photoIds: Array<string>\n}\n\nconst apiUrl = 'https://test.carprof.ee/api/v1'\nconst formsUrl = `${apiUrl}/forms`\nconst externalUrl = `${apiUrl}/external`\n\nconst fileUrl = `${formsUrl}/file`\nconst clientUrl = `${externalUrl}/personal-data`\nconst buyoutUrl = (formId: string): string => `${externalUrl}/buyout/${formId}`\nconst lookupCarRegistryUrl = (plateNumber: string): string => `${apiUrl}/cars/mnt/${plateNumber}`\n\nconst fetchTyped = async <T>(url: string, init: RequestInit = { method: 'GET' }): Promise<T> => {\n  const response = await fetch(url, init)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${init.method} ${url}: ${response.status} ${response.statusText}`)\n  } else {\n    const responseText = await response.text()\n    if (!responseText || responseText.length === 0) {\n      return undefined as unknown as Promise<T>\n    } else {\n      return JSON.parse(responseText) as Promise<T>\n    }\n  }\n}\n\nconst getTyped = async <T>(url: string): Promise<T> => fetchTyped(url)\nconst postTyped = async <T, R>(url: string, body: T): Promise<R> =>\n  fetchTyped(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n\nexport const apiGetClient = (): Promise<ClientPersonalData> => getTyped(clientUrl)\nexport const apiPostClient = (request: ClientRequest): Promise<ClientResponse> => postTyped(clientUrl, request)\n\nexport const apiUploadFile = (file: File): Promise<FileUploadResponse> => {\n  const data = new FormData()\n  data.append('file', file)\n\n  return fetchTyped(fileUrl, {\n    method: 'POST',\n    body: data\n  })\n}\n\nexport const apiPostBuyout = (formId: string, request: BuyoutRequest): Promise<Response> =>\n  postTyped(buyoutUrl(formId), request)\n\nexport const apiGetCar = (plateNumber: string): Promise<VehicleMntSearchResponse> =>\n  getTyped(lookupCarRegistryUrl(plateNumber))\n\nexport type FN<T, R> = (value: T) => R\nexport type Handler<T> = FN<T, void>\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type NullableType<T = NonNullable<any>> = T | null | undefined\nexport const isEmpty = <T>(value: NullableType<T>): value is null | undefined => value === null || value === undefined\nexport const hasValue = <T>(value: NullableType<T>): value is T => !isEmpty(value)\n\nexport const fromFileList = (files: NullableType<FileList>): Array<File> => {\n  const result: Array<File> = []\n  if (hasValue(files)) {\n    for (const file of files) {\n      result.push(file)\n    }\n  }\n  return result\n}\n\nexport const uploadFilesList =\n  <TUploadResult>(\n    upload: FN<File, Promise<TUploadResult>>,\n    onFileUploadSuccess?: Handler<void>,\n    onFileUploadError?: Handler<unknown>\n  ): FN<Array<File>, Promise<Array<TUploadResult>>> =>\n  (files) =>\n    Promise.all(\n      files.map((file) =>\n        upload(file)\n          .then((result) => {\n            onFileUploadSuccess?.()\n            return result\n          })\n          .catch((e) => {\n            // eslint-disable-next-line no-console\n            console.error('File upload error', e)\n            onFileUploadError?.(e)\n            return undefined\n          })\n      )\n    ).then((result) => result.filter(hasValue))\n","import { DmElementType, DmFieldState, DmFieldStateList } from './dmtypes'\n\nexport type DmElement<T extends HTMLElement> = {\n  id?: string\n  name?: string\n  type?: DmElementType\n  el: T\n  show: () => void\n  hide: () => void\n}\n\nexport type DmField = DmElement<HTMLElement> & {\n  getLabel: () => DmElement<HTMLElement> | undefined\n  getInput: () => DmElement<HTMLInputElement> | undefined\n  setInputValue: (value: string) => void\n  getError: () => DmElement<HTMLElement> | undefined\n  clearError(): void\n  setError: (error: string) => void\n  setState: (state: DmFieldState) => void\n}\n\nexport type DmForm = DmElement<HTMLFormElement> & {\n  getField: (name: string) => DmField | undefined\n  getError: () => DmElement<HTMLElement> | undefined\n  clearError(): void\n  setError: (error: string) => void\n  setOnSubmit: (handler: (e: Event) => void) => void\n}\n\nconst getElement = <T extends HTMLElement>(path: string): T | undefined => {\n  const el: HTMLElement | null = document.querySelector(path)\n  if (el === null) {\n    console.error(`Element not found by path: ${path}.`)\n    return undefined\n  } else {\n    return el as T\n  }\n}\n\nconst createDmElement = <T extends HTMLElement>(el: T, name: string | undefined = undefined): DmElement<T> => {\n  return {\n    el,\n    id: el.attributes.getNamedItem('data-dm-id')?.value,\n    name: name ?? el.attributes.getNamedItem('data-dm-name')?.value,\n    type: el.attributes.getNamedItem('data-dm-type')?.value as DmElementType,\n    show: () => {\n      el.style.display = 'block'\n    },\n    hide: () => {\n      el.style.display = 'none'\n    }\n  }\n}\n\nconst createDmElementOpt = <T extends HTMLElement>(\n  el: T | undefined,\n  name: string | undefined = undefined\n): DmElement<T> | undefined => (el ? createDmElement(el, name) : undefined)\n\nexport const getElementById = <T extends HTMLElement>(id: string): T | undefined =>\n  getElement<T>(`[data-dm-id=\"${id}\"]`)\n\nconst getElementChildByType = <T extends HTMLElement>(name: string, type: DmElementType): T | undefined =>\n  getElement<T>(`[data-dm-name=\"${name}\"] [data-dm-type=\"${type}\"]`)\n\nconst getElementChildByName = <T extends HTMLElement>(id: string, name: string): T | undefined =>\n  getElement<T>(`[data-dm-id=\"${id}\"] [data-dm-name=\"${name}\"]`)\n\nconst getField = (name: string): DmField | undefined => {\n  const field = getElement<HTMLInputElement>(`[data-dm-name=\"${name}\"]`)\n  const getErrorEl = (): HTMLElement | undefined => getElementChildByType<HTMLElement>(name, 'error')\n  const setState = (state: DmFieldState): void => {\n    const el = getErrorEl()\n    if (el) {\n      DmFieldStateList.map((s) => `field-state-${s}`)\n        .filter((v) => el.classList.contains(v))\n        .forEach((s) => el.classList.remove(s))\n      el.classList.add(`field-state-${state}`)\n    }\n  }\n  if (field) {\n    return {\n      ...createDmElement(field, name),\n      getLabel: () => createDmElementOpt(getElementChildByType<HTMLElement>(name, 'label')),\n      getInput: () => createDmElementOpt<HTMLInputElement>(getElementChildByType<HTMLInputElement>(name, 'input')),\n      setInputValue: (value: string) => {\n        getElementChildByType<HTMLInputElement>(name, 'input')?.setAttribute('value', value)\n      },\n      getError: () => createDmElementOpt(getErrorEl()),\n      setState: setState,\n      clearError() {\n        const el = getErrorEl()\n        if (el) {\n          setState('default')\n          el.innerHTML = ''\n        }\n      },\n      setError: (error: string): void => {\n        const el = getErrorEl()\n        if (el) {\n          setState('error')\n          el.innerHTML = error\n        }\n      }\n    } as DmField\n  } else {\n    return undefined\n  }\n}\n\nexport const setupFormHandler = (form: HTMLFormElement, handler: (e: Event) => void): void => {\n  form.action = ''\n  form.method = ''\n  form.onsubmit = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  // TODO: Remove all event listeners\n  form.addEventListener('submit', handler)\n}\n\nexport const getForm = (name: string): DmForm | undefined => {\n  const form = getElement<HTMLFormElement>(`[data-dm-id=\"${name}\"]`)\n  const getErrorEl = (): HTMLElement | undefined => getElementChildByName<HTMLElement>(name, 'form_error')\n  if (form) {\n    return {\n      name: name,\n      el: form,\n      show: () => {\n        form.style.display = 'block'\n      },\n      hide: () => {\n        form.style.display = 'none'\n      },\n      getField: getField,\n      getError: () => createDmElementOpt(getErrorEl()),\n      clearError() {\n        const el = getErrorEl()\n        if (el) {\n          el.innerHTML = ''\n        }\n      },\n      setError: (error: string) => {\n        const el = getErrorEl()\n        if (el) {\n          el.innerHTML = error\n        }\n      },\n      setOnSubmit: (handler) => setupFormHandler(form, handler)\n    }\n  } else {\n    return undefined\n  }\n}\n","export const DmElementTypeList = ['control', 'label', 'error', 'input'] as const\nexport type DmElementType = (typeof DmElementTypeList)[number]\n\nexport const DmFieldStateList = ['error', 'success', 'default'] as const\nexport type DmFieldState = (typeof DmFieldStateList)[number]\n\nexport type Validator = (v: string | undefined) => boolean\n\nexport type StateStorage<T> = {\n  state: T\n  setState(value: T): void\n}\n","import { Validator } from './dmtypes'\nimport { DmFieldInstance } from './dmform'\n\nexport const isEmpty = <T>(value: T | undefined | null): value is undefined | null =>\n  value === null || value === undefined\n\nexport const validateInput = (\n  field: DmFieldInstance,\n  validator: Validator,\n  errMsg: () => string\n): string | undefined => {\n  const value = field.input.el.value\n  if (!validator(value)) {\n    field.setError(errMsg())\n    return undefined\n  }\n  return value\n}\n\nexport const validateNonEmpty = (field: DmFieldInstance): string | undefined =>\n  validateInput(\n    field,\n    (value) => !!value && value.length > 0,\n    () => 'This field must be filled!'\n  )\n\nexport const validateEmail = (field: DmFieldInstance): string | undefined =>\n  validateInput(\n    field,\n    (value) => !!value && value.includes('@'),\n    () => 'Invalid email!'\n  )\n","import { DmElement, DmField, DmForm } from './dmdom'\nimport { DmFieldState } from './dmtypes'\n\nexport type DmFieldInstance = DmElement<HTMLElement> & {\n  label: DmElement<HTMLElement>\n  input: DmElement<HTMLInputElement>\n  error: DmElement<HTMLElement>\n  clearError: () => void\n  setError: (error: string) => void\n  setState: (state: DmFieldState) => void\n  setInputValue: (value: string) => void\n}\n\nexport type DmFormInstance<T extends string> = DmElement<HTMLElement> & {\n  fields: Record<T, DmFieldInstance>\n  error: DmElement<HTMLElement>\n  clearError: () => void\n  clearAllErrors: () => void\n  setError: (error: string) => void\n  setOnSubmit: (handler: (e: Event) => void) => void\n}\n\nconst getFormFields = (form: DmForm, fieldNames: ReadonlyArray<string>): ReadonlyArray<DmField> | undefined => {\n  const fields = fieldNames.map((name) => form.getField(name))\n  if (fields.length !== fieldNames.length) {\n    console.error('Form should have all fields!', fieldNames)\n    form.setError('Unexpected error: missing fields!')\n    return undefined\n  } else {\n    return fields as ReadonlyArray<DmField>\n  }\n}\n\nconst createRecord = <T>(arr: ReadonlyArray<T>, propertyName: keyof T): Record<string, T> => {\n  const record: Record<string, T> = {}\n\n  arr.forEach((item) => {\n    const key = item[propertyName] as unknown as string\n    record[key] = item\n  })\n\n  return record\n}\n\nexport const createFormInstance = <T extends string>(form: DmForm, fieldNames: ReadonlyArray<T>): DmFormInstance<T> => {\n  const fields = getFormFields(form, fieldNames)\n  if (!fields) {\n    throw new Error('Form should have all fields!')\n  }\n  const fieldInstances: ReadonlyArray<DmFieldInstance> = fields.map((field) => {\n    const label = field.getLabel()\n    const input = field.getInput()\n    const error = field.getError()\n    if (!label || !input || !error) {\n      console.error('Form field must have label, input, error elements!', field.name, field.el)\n      throw new Error('Form field must have label, input, error elements!')\n    }\n    return {\n      label,\n      input,\n      error,\n      id: field.id,\n      name: field.name,\n      type: field.type,\n      el: field.el,\n      show: () => field.show(),\n      hide: () => field.hide(),\n      clearError: () => field.clearError(),\n      setError: (error: string) => field.setError(error),\n      setState: (state: DmFieldState) => field.setState(state),\n      setInputValue: (value: string) => field.setInputValue(value)\n    } satisfies DmFieldInstance\n  })\n\n  const error = form.getError()\n  if (!error) {\n    console.error('Form must have error element!', form.el)\n    throw new Error('Form must have error element!')\n  }\n  return {\n    id: form.id,\n    name: form.name,\n    type: form.type,\n    el: form.el,\n    show: () => form.show(),\n    hide: () => form.hide(),\n    fields: createRecord(fieldInstances, 'name'),\n    error: error,\n    clearError: () => form.clearError(),\n    clearAllErrors: () => {\n      form.clearError()\n      fieldInstances.forEach((field) => field.clearError())\n    },\n    setError: (error: string) => form.setError(error),\n    setOnSubmit: (handler: (e: Event) => void) => form.setOnSubmit(handler)\n  } satisfies DmFormInstance<T>\n}\n"],"names":[],"version":3,"file":"main.js.map"}