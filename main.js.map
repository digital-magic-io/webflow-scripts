{"mappings":"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","sources":["src/index.ts","src/api.ts","src/wfdom.ts"],"sourcesContent":["import {\n  apiGetCar,\n  apiGetClient,\n  apiPostBuyout,\n  apiPostClient,\n  apiUploadFile,\n  BuyoutRequest,\n  ClientRequest,\n  fromFileList,\n  uploadFilesList\n} from './api'\nimport { getInput, setMsg, setInput, setupFormHandler } from './wfdom'\nimport { WfConfiguration } from './wfconfig'\n\ntype State = {\n  form: Partial<BuyoutRequest>\n}\n\n// TODO: Use functional State pattern\nconst state: State = {\n  form: {}\n}\n\nconst handleSubmitClient =\n  (stepper: WfConfiguration['stepper'], f: WfConfiguration['elements']['stepClient']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const client: ClientRequest = {\n      formType: 'BUYOUT',\n      name: getInput(f.txtName)?.value ?? '',\n      email: getInput(f.txtEmail)?.value ?? '',\n      phoneNumber: getInput(f.txtPhone)?.value ?? '',\n      language: 'et'\n    }\n    if (client.name && client.email && client.phoneNumber) {\n      void apiPostClient(client)\n        .then(() => {\n          stepper.nextStepFn(1)\n        })\n        .catch((error) => {\n          console.error('API error:', error)\n          setMsg(f.msgError, 'Unable to send client data!')\n        })\n    } else {\n      setMsg(f.msgError, 'All fields must be filled!')\n    }\n  }\n\nconst handleSubmitSearchVehicle =\n  (f: WfConfiguration['elements']['stepVehicle']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.plateNumber.msgError, '')\n    const plateNumber = getInput(f.plateNumber.txtPlateNumber)?.value\n    if (plateNumber && plateNumber.length > 0) {\n      console.log('Plate number:', plateNumber)\n      apiGetCar(plateNumber)\n        .then((response) => {\n          console.log('Car response:', response)\n          setInput(f.txtMake, response.mark)\n          setInput(f.txtModel, response.model)\n          setInput(f.txtYear, String(response.firstRegYear))\n          //setInput(f.txtMileage, )\n          //setInput(f.txtLocation, )\n          //setInput(f.txtPrice)\n          //setInput()\n        })\n        .catch((error) => {\n          console.error('Car error:', error)\n          setMsg(f.plateNumber.msgError, 'Car not found!')\n        })\n    } else {\n      setMsg(f.plateNumber.msgError, 'Plate number must be filled!')\n    }\n  }\n\nconst handleSubmitVehicle =\n  (stepper: WfConfiguration['stepper'], f: WfConfiguration['elements']['stepVehicle']) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const make = getInput(f.txtMake)?.value\n    const model = getInput(f.txtModel)?.value\n    const year = getInput(f.txtYear)?.value\n    const mileage = getInput(f.txtMileage)?.value\n    const location = getInput(f.txtLocation)?.value\n    const price = getInput(f.txtPrice)?.value\n    const message = getInput(f.txtMessage)?.value\n    const plateNumber = getInput(f.plateNumber.txtPlateNumber)?.value\n    if (make && model && year && mileage && price && plateNumber) {\n      const request: BuyoutRequest = {\n        registrationNumber: plateNumber,\n        fuelId: 1,\n        transmissionId: 1,\n        imageIds: [],\n        make,\n        model,\n        year: Number(year), // TODO: Use safe parse\n        mileage: Number(mileage),\n        location,\n        requestedPrice: Number(price),\n        additionalInfo: message\n      }\n      console.log(`Submitted: request=${JSON.stringify(request)}`)\n      state.form = request\n      console.log(`State updated: ${JSON.stringify(state)}`)\n      stepper.nextStepFn(2)\n    } else {\n      setMsg(f.msgError, 'All vehicle fields must be filled except message!')\n    }\n  }\n\nconst handleSubmitFiles =\n  (f: WfConfiguration['elements']['stepFiles'], msgSuccess: string) =>\n  (e: Event): void => {\n    console.log('Form submitted', e.target)\n    setMsg(f.msgError, '')\n    const files = getInput(f.inputFiles)?.files\n    if (files && files.length > 0) {\n      console.log('Files:', files)\n      const uploadFiles = uploadFilesList(apiUploadFile)\n      void uploadFiles(fromFileList(files)).then((response) => {\n        state.form.imageIds = response.map((v) => v.fileId)\n        console.log(`State updated: ${JSON.stringify(state)}`)\n        void apiPostBuyout(state.form as BuyoutRequest).then(() => {\n          console.log('Success!')\n          setMsg(msgSuccess, 'Great success!')\n        })\n      })\n    } else if (files && files.length > 10) {\n      setMsg(f.msgError, 'Too many files selected!')\n    } else {\n      setMsg(f.msgError, 'Files must be selected!')\n    }\n  }\n\nexport const init = (conf: WfConfiguration): void => {\n  console.log('Initializing...', conf)\n  void apiGetClient().then((client) => {\n    console.log('Client', client)\n    setupFormHandler(conf.elements.stepClient.form, handleSubmitClient(conf.stepper, conf.elements.stepClient))\n    setupFormHandler(conf.elements.stepVehicle.plateNumber.form, handleSubmitSearchVehicle(conf.elements.stepVehicle))\n    setupFormHandler(conf.elements.stepVehicle.form, handleSubmitVehicle(conf.stepper, conf.elements.stepVehicle))\n    setupFormHandler(conf.elements.stepFiles.form, handleSubmitFiles(conf.elements.stepFiles, conf.elements.msgSuccess))\n  })\n}\n","type Language = 'et' | 'ru' | 'en'\n\ntype FormType = 'BUYOUT'\n\nexport type ClientPersonalData = {\n  name: string\n  email: string\n  phoneNumber: string\n  language: Language\n}\n\nexport type ClientRequest = {\n  formType: FormType\n} & ClientPersonalData\n\nexport type FileUploadResponse = {\n  fileId: string\n}\n\nexport type VehicleMntSearchResponse = {\n  engine?: {\n    type: 'FUELS'\n    value: number\n  }\n  engineVolCm3?: number\n  engineKw?: number\n  firstRegYear?: number\n  mark: string\n  model: string\n  nextInspectionDate?: string\n  transmission?: {\n    type: 'TRANSMISSIONS'\n    value: number\n  }\n  registrationNumber?: string\n}\n\nexport type TranslationValueId = number\n\nexport type BuyoutRequest = {\n  registrationNumber: string\n  fuelId: TranslationValueId\n  engineVolCm3?: number\n  engineKw?: number\n  imageIds: Array<string>\n  make: string\n  model: string\n  mileage: number\n  requestedPrice: number\n  transmissionId: TranslationValueId\n  nextInspectionDate?: string\n  year: number\n  location?: string\n  additionalInfo?: string\n}\n\nconst apiUrl = 'https://test.carprof.ee/api/v1'\nconst formsUrl = `${apiUrl}/forms`\n\nconst fileUrl = `${formsUrl}/file`\nconst clientUrl = `${formsUrl}/client`\nconst buyoutUrl = `${formsUrl}/buyout`\nconst lookupCarRegistryUrl = (plateNumber: string): string => `${apiUrl}/cars/mnt/${plateNumber}`\n\nconst fetchTyped = async <T>(url: string, init: RequestInit = { method: 'GET' }): Promise<T> => {\n  const response = await fetch(url, { credentials: 'include', ...init })\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${init.method} ${url}: ${response.status} ${response.statusText}`)\n  } else {\n    const responseText = await response.text()\n    if (!responseText || responseText.length === 0) {\n      return undefined as unknown as Promise<T>\n    } else {\n      return JSON.parse(responseText) as Promise<T>\n    }\n  }\n}\n\nconst getTyped = async <T>(url: string): Promise<T> => fetchTyped(url)\nconst postTyped = async <T, R>(url: string, body: T): Promise<R> =>\n  fetchTyped(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n\nexport const apiGetClient = (): Promise<ClientPersonalData> => getTyped(clientUrl)\nexport const apiPostClient = (request: ClientRequest): Promise<Response> => postTyped(clientUrl, request)\n\nexport const apiUploadFile = (file: File): Promise<FileUploadResponse> => {\n  const data = new FormData()\n  data.append('file', file)\n\n  return fetchTyped(fileUrl, {\n    method: 'POST',\n    body: data\n  })\n}\n\nexport const apiPostBuyout = (request: BuyoutRequest): Promise<Response> => postTyped(buyoutUrl, request)\n\nexport const apiGetCar = (plateNumber: string): Promise<VehicleMntSearchResponse> =>\n  getTyped(lookupCarRegistryUrl(plateNumber))\n\nexport type FN<T, R> = (value: T) => R\nexport type Handler<T> = FN<T, void>\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type NullableType<T = NonNullable<any>> = T | null | undefined\nexport const isEmpty = <T>(value: NullableType<T>): value is null | undefined => value === null || value === undefined\nexport const hasValue = <T>(value: NullableType<T>): value is T => !isEmpty(value)\n\nexport const fromFileList = (files: NullableType<FileList>): Array<File> => {\n  const result: Array<File> = []\n  if (hasValue(files)) {\n    for (const file of files) {\n      result.push(file)\n    }\n  }\n  return result\n}\n\nexport const uploadFilesList =\n  <TUploadResult>(\n    upload: FN<File, Promise<TUploadResult>>,\n    onFileUploadSuccess?: Handler<void>,\n    onFileUploadError?: Handler<unknown>\n  ): FN<Array<File>, Promise<Array<TUploadResult>>> =>\n  (files) =>\n    Promise.all(\n      files.map((file) =>\n        upload(file)\n          .then((result) => {\n            onFileUploadSuccess?.()\n            return result\n          })\n          .catch((e) => {\n            // eslint-disable-next-line no-console\n            console.error('File upload error', e)\n            onFileUploadError?.(e)\n            return undefined\n          })\n      )\n    ).then((result) => result.filter(hasValue))\n","export const getElement = <T extends HTMLElement>(path: string): T | undefined => {\n  const el: HTMLElement | null = document.querySelector(path)\n  if (el === null) {\n    console.error(`Element not found by path: ${path}.`)\n    return undefined\n  } else {\n    return el as T\n  }\n}\nexport const getInput = (path: string): HTMLInputElement | undefined => getElement<HTMLInputElement>(path)\nexport const setInput = (path: string, value: string): void => {\n  const input = getInput(path)\n  if (input) {\n    input.value = value\n  }\n}\n\nexport const getForm = (path: string): HTMLFormElement | undefined => getElement<HTMLFormElement>(path)\n\nexport const setMsg = (path: string, msg: string): void => {\n  const el = getElement(path)\n  if (el) {\n    el.innerHTML = msg\n  }\n}\n\nexport const setupFormHandler = (path: string, handler: (e: Event) => void): void => {\n  const form = getForm(path)\n  if (form) {\n    form.action = ''\n    form.method = ''\n    form.onsubmit = (e) => {\n      e.preventDefault()\n      e.stopPropagation()\n    }\n    // TODO: Remove all event listeners\n    form.addEventListener('submit', handler)\n  } else {\n    console.error(`Unable to find form with id \"${path}\"`)\n  }\n}\n\nexport const setupBtnHandler = (path: string, handler: (e: Event) => void): void => {\n  const btn = getElement<HTMLButtonElement>(path)\n  if (btn) {\n    btn.onclick = handler\n  } else {\n    console.error(`Unable to find button with id \"${path}\"`)\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}