{"mappings":"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","sources":["src/index.ts","src/cp/index.ts","src/cp/actions.ts","src/cp/api/index.ts","src/cp/api/requests.ts","src/core/index.ts","src/core/form.ts","src/core/dom.ts","src/core/fetch.ts","src/core/utils.ts","src/core/config.ts"],"sourcesContent":["import { CpConfig } from './config'\nimport {\n  ActionState,\n  AppConfig,\n  CpFormConfig,\n  FileForm,\n  InitialForm,\n  reloadVehicleFormData,\n  submitFiles,\n  submitInitialForm,\n  submitVehicleForm,\n  VehicleForm\n} from './cp'\nimport { init } from './core'\nimport { FormErrorMessages } from './core/types'\n\nexport const initCp = (conf: CpConfig): void => {\n  console.log('Initializing...', conf)\n\n  // eslint-disable-next-line prefer-const\n  let formId: string | undefined = undefined\n  const setFormId = (id: string): void => {\n    formId = id\n  }\n  const getFormId = (): string | undefined => {\n    return formId\n  }\n\n  const state: ActionState = {\n    getFormId,\n    setFormId,\n    messages: conf.messages\n  }\n\n  const labelConfig: AppConfig['labels'] = {\n    testLabel: {\n      selector: '[data-dm-id=\"testLabel\"]'\n    }\n  }\n\n  const buttonConfig: AppConfig['buttons'] = {\n    manual: {\n      selector: '[data-dm-id=\"manual\"]',\n      onClick: (ctx) => {\n        console.debug('Button clicked:', ctx)\n        ctx.buttons.manual.setDisabled(true)\n        ctx.buttons.manual.setLabel('Loading...')\n        ctx.labels.testLabel.setLabel('Test label')\n        setTimeout(() => {\n          ctx.forms.initial.el.style.display = 'none'\n          ctx.forms.vehicle.el.removeAttribute('style')\n        }, 3000)\n      }\n    }\n  }\n\n  const initialFormConfig: CpFormConfig = {\n    selector: '[data-dm-id=\"form_find_vehicle\"]',\n    onSuccess: (ctx) => {\n      conf.actions.switchStep(1, ctx)\n    },\n    onError: (error: string, ctx) => {\n      ctx.forms.initial.setError(error)\n    },\n    onSubmit: (data: InitialForm, ctx, success, fail) => submitInitialForm({ data, ctx, success, fail, state })\n  }\n\n  const vehicleErrorMessages: Partial<FormErrorMessages> = {\n    pattern: state.messages.invalidEmailError\n  }\n\n  const vehicleFormConfig: CpFormConfig = {\n    selector: '[data-dm-id=\"form_vehicle\"]',\n    errorMessages: vehicleErrorMessages,\n    onSuccess: (ctx) => {\n      conf.actions.switchStep(2, ctx)\n    },\n    onError: (error: string, ctx) => {\n      ctx.forms.vehicle.setError(error)\n    },\n    onSubmit: (data: VehicleForm, ctx, success, fail) => submitVehicleForm({ data, ctx, success, fail, state })\n  }\n\n  const filesFormConfig: CpFormConfig = {\n    selector: '[data-dm-id=\"form_files\"]',\n    onSuccess: (ctx) => {\n      conf.actions.switchStep(3, ctx)\n    },\n    onError: (error: string, ctx) => {\n      ctx.forms.files.setError(error)\n    },\n    onSubmit: (data: FileForm, ctx, success, fail) => submitFiles({ data, ctx, success, fail, state })\n  }\n\n  const cfg: AppConfig = {\n    forms: {\n      initial: initialFormConfig,\n      vehicle: vehicleFormConfig,\n      files: filesFormConfig\n    },\n    buttons: buttonConfig,\n    labels: labelConfig,\n    handlers: conf.handlers,\n    errorMessages: conf.errorMessages,\n    afterInit: (ctx) => {\n      console.log('After init:', ctx)\n      ctx.forms.vehicle.fields.plateNumber.input.el.onblur = () => {\n        const plateNumber = ctx.forms.vehicle.fields.plateNumber.input.el.value\n        console.log('On blur:', ctx.forms.vehicle.fields.plateNumber.input.el.value)\n        const formCfg = vehicleFormConfig\n        void reloadVehicleFormData({\n          data: { plateNumber },\n          ctx,\n          success: () => {},\n          fail: (error) => formCfg.onError(error, ctx),\n          state\n        })\n      }\n    }\n  }\n  init(cfg)\n}\n","export type * from './types'\nexport * from './actions'\n","import { ActionParams, FileForm, InitialForm, LookupVehicleForm, VehicleForm } from './types'\nimport { ErrorResponse, lookupCarRegistry, sendFormData, sendInitForm, uploadAndSendPhotos } from './api'\nimport { mapOrElse, mapValue } from '../core/utils'\nimport { ApiError, getErrorFromResponse } from '../core'\n\ndeclare global {\n  const grecaptcha: {\n    ready: (callback: () => void) => void\n    execute: (siteKey: string, options: { action: string }) => Promise<string>\n  }\n}\n\nexport const submitInitialForm = async ({\n  data,\n  ctx,\n  success,\n  fail,\n  state\n}: ActionParams<InitialForm>): Promise<void> => {\n  try {\n    console.debug('Initial form submitted', data)\n    ctx.forms.initial.clearAllErrors()\n    const token = await grecaptcha.execute('6LfAgNQpAAAAAOYmB_Y_tmUGjP4AY-hRzyHxE3JF', {\n      action: 'submit'\n    })\n    const resp = await sendInitForm({\n      //captchaToken: token,\n      phoneNumber: data.phone,\n      carNumber: data.plateNumber,\n      language: 'et',\n      formType: 'BUYOUT'\n    })\n    console.debug('Initial form response', resp)\n    state.setFormId(resp.formUuid)\n    if (resp.mntData) {\n      const { mark, model, firstRegYear, registrationNumber } = resp.mntData\n      ctx.forms.vehicle.setFormValues({\n        phone: data.phone,\n        make: mark,\n        model,\n        year: mapOrElse(firstRegYear, String, ''),\n        plateNumber: registrationNumber\n      })\n    } else {\n      ctx.forms.vehicle.setFormValues({\n        phone: data.phone,\n        plateNumber: data.plateNumber\n      })\n    }\n    success()\n  } catch (e) {\n    if (e instanceof ApiError) {\n      if (e.response.status === 400) {\n        const { errorCode, error } = await getErrorFromResponse<ErrorResponse>(e.response)\n        console.error('Response error: ', error)\n        if (errorCode === 'INVALID_PHONE_NUMBER') {\n          fail(state.messages.invalidPhoneError)\n        } else {\n          fail(state.messages.internalError)\n        }\n      } else if (e.response.status === 403) {\n        console.error('Response error: ', e)\n        fail('Captcha error')\n      } else {\n        console.error('Response error: ', e)\n        fail(state.messages.internalError)\n      }\n    } else {\n      console.error('Response error: ', e)\n      fail(state.messages.internalError)\n    }\n  }\n}\n\nexport const reloadVehicleFormData = async ({\n  data: { plateNumber },\n  ctx,\n  success,\n  fail,\n  state\n}: ActionParams<LookupVehicleForm>): Promise<void> => {\n  try {\n    console.debug('Reloading vehicle data for plate number:', plateNumber)\n    ctx.forms.vehicle.clearAllErrors()\n    const resp = await lookupCarRegistry(plateNumber)\n    if (resp) {\n      console.debug('Lookup response:', resp)\n      const { mark, model, firstRegYear, registrationNumber } = resp\n      ctx.forms.vehicle.setFormValues({\n        make: mark,\n        model,\n        year: mapOrElse(firstRegYear, String, ''),\n        plateNumber: registrationNumber\n      })\n      success()\n    }\n  } catch (e) {\n    console.error('Lookup error:', e)\n    fail(state.messages.internalError)\n  }\n}\n\nexport const submitVehicleForm = async ({\n  data,\n  ctx,\n  success,\n  fail,\n  state\n}: ActionParams<VehicleForm>): Promise<void> => {\n  const formId = state.getFormId()\n  if (!formId) {\n    throw new Error('FormId is missing')\n  }\n  try {\n    console.debug('Vehicle form submitted', data)\n    ctx.forms.vehicle.clearAllErrors()\n    const response = await sendFormData(formId, {\n      carNumber: data.plateNumber,\n      mark: data.make,\n      model: data.model,\n      mileage: mapValue(data.mileage, Number),\n      location: data.location,\n      requestedPrice: Number(data.price),\n      fullName: data.name,\n      email: data.email\n    })\n    console.debug('Vehicle form response', response)\n    success()\n  } catch (e) {\n    console.error('Response error:', e)\n    fail(state.messages.internalError)\n  }\n}\n\nexport const submitFiles = async ({ data, ctx, success, fail, state }: ActionParams<FileForm>): Promise<void> => {\n  const formId = state.getFormId()\n  if (!formId) {\n    throw new Error('FormId is missing')\n  }\n  try {\n    console.debug('Files submitted', data)\n    ctx.forms.files.clearAllErrors()\n    if (data?.files && data.files.length > 0) {\n      await uploadAndSendPhotos(formId, data.files)\n    }\n    ctx.resetAll()\n    success()\n  } catch (e) {\n    console.error('Response error:', e)\n    fail(state.messages.internalError)\n  }\n}\n","export type * from './types'\nexport * from './requests'\n","import { getTyped, postTyped, uploadTypedFileList } from '../../core'\nimport {\n  FormDataRequest,\n  FormPhotosRequest,\n  InitialDataRequest,\n  InitialDataResponse,\n  LookupCarRegistryRequest\n} from './types'\n\nconst apiUrl = 'https://test.carprof.ee/api'\nconst formsUrl = `${apiUrl}/v2/forms`\nconst initialFormUrl = `${formsUrl}/initial-data`\nconst lookupCarRegistryUrl = (plateNumber: string): string => `${apiUrl}/v1/cars/mnt/${plateNumber}`\nconst formDataUrl = (formId: string): string => `${formsUrl}/form-data/${formId}`\nconst photosUrl = (formId: string): string => `${formsUrl}/photos/${formId}`\nconst fileUrl = `${apiUrl}/v1/forms/file`\n\nexport const lookupCarRegistry = async (plateNumber: string): Promise<LookupCarRegistryRequest> =>\n  getTyped(lookupCarRegistryUrl(plateNumber))\n\nexport const sendInitForm = (request: InitialDataRequest): Promise<InitialDataResponse> =>\n  postTyped(initialFormUrl, request)\n\nexport const sendFormData = (formId: string, data: FormDataRequest): Promise<void> =>\n  postTyped(formDataUrl(formId), data)\n\nexport const sendPhotos = (formId: string, data: FormPhotosRequest): Promise<void> => postTyped(photosUrl(formId), data)\n\nexport const uploadAndSendPhotos = async (formId: string, files: FileList): Promise<void> => {\n  const fileIds = await uploadTypedFileList<{ fileId: string }>(fileUrl, files)\n  await sendPhotos(formId, { imageIds: fileIds.map((v) => v.fileId) })\n}\n","import type { ButtonConfig, Config, FormConfig, FormHandlers, LabelConfig, PageContext } from './config'\nimport type { FailedValidationType, FormErrorMessages } from './types'\nimport type { DmButton, DmForm, DmLabel } from './form'\nimport { createButton, createForm, createLabel } from './form'\nimport { getElement } from './dom'\n\nexport * from './fetch'\nexport * from './config'\n\nconst setupForm = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  formName: F,\n  formConfig: FormConfig<F, B, L>,\n  globalErrorMessages: FormErrorMessages,\n  handlers?: FormHandlers\n): DmForm<F> => {\n  console.debug('Form:', formName, formConfig)\n  const form = createForm(formConfig.selector, formName, { ...globalErrorMessages, ...formConfig.errorMessages })\n  handlers?.init?.(form)\n  form.setOnSubmit(async () => {\n    console.log('Form submitted:', formName, form.fields)\n    handlers?.beforeSubmit?.(form)\n    await formConfig\n      .onSubmit(\n        form.getFormValues(),\n        ctx,\n        () => formConfig.onSuccess(ctx),\n        (error) => formConfig.onError(error, ctx)\n      )\n      .catch((error) => {\n        console.error('Unhandled exception!', error)\n        formConfig.onError('Unexpected error!', ctx)\n      })\n      .finally(() => {\n        handlers?.afterSubmit?.(form)\n      })\n  })\n  form.el.setAttribute('novalidate', 'true')\n  return form\n}\n\nconst setupButton = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  buttonName: B,\n  buttonConfig: ButtonConfig<F, B, L>\n): DmButton => {\n  const button = getElement<HTMLButtonElement>(buttonConfig.selector)\n  if (button) {\n    button.addEventListener('click', () => buttonConfig.onClick(ctx))\n    const result = createButton(button)\n    ctx.buttons[buttonName] = result\n    return result\n  } else {\n    throw new Error('Button not found by selector: ' + buttonConfig.selector)\n  }\n}\n\nconst setupLabel = <F extends string, B extends string, L extends string>(\n  ctx: PageContext<F, B, L>,\n  labelName: L,\n  labelConfig: LabelConfig\n): DmLabel => {\n  const label = getElement(labelConfig.selector)\n  if (label) {\n    const result = createLabel(label)\n    ctx.labels[labelName] = result\n    return result\n  } else {\n    throw new Error('Label not found by selector: ' + labelConfig.selector)\n  }\n}\n\nconst defaultErrors: Record<FailedValidationType, string> = {\n  required: 'This field is required',\n  minlength: 'Field length is too small',\n  maxlength: 'Field length is too big',\n  pattern: 'Field does not match the pattern',\n  min: 'Field value is too small',\n  max: 'Field value is too big'\n}\n\nexport const init = <F extends string, B extends string, L extends string>(conf: Config<F, B, L>): void => {\n  console.log('Initializing...', conf)\n\n  const ctx: PageContext<F, B, L> = {\n    forms: {},\n    buttons: {},\n    labels: {}\n  } as PageContext<F, B, L>\n\n  if (conf.forms) {\n    // TODO: Update foreach to map or reduce\n    Object.entries<FormConfig<F, B, L>>(conf.forms).forEach(([formName, formConfig]) => {\n      ctx.forms[formName as F] = setupForm<F, B, L>(\n        ctx,\n        formName as F,\n        formConfig,\n        conf.errorMessages ?? defaultErrors,\n        conf.handlers\n      ) satisfies DmForm<F>\n    })\n    ctx.resetAll = () => {\n      Object.values<DmForm<string>>(ctx.forms).forEach((form) => form.resetForm())\n    }\n    if (conf.buttons) {\n      Object.entries<ButtonConfig<F, B, L>>(conf.buttons).forEach(([buttonName, buttonConfig]) => {\n        setupButton(ctx, buttonName as B, buttonConfig)\n      })\n    }\n    if (conf.labels) {\n      Object.entries<LabelConfig>(conf.labels).forEach(([labelName, labelConfig]) => {\n        setupLabel(ctx, labelName as L, labelConfig)\n      })\n    }\n\n    conf.afterInit?.(ctx)\n\n    console.log('Initialized with context: ', ctx)\n  }\n}\n","import type { FN, FormErrorMessages, Handler, Validator } from './types'\nimport { getElement, getFormElement, getInputElement, setupFormHandler } from './dom'\n\nclass FormError extends Error {\n  parent?: HTMLElement\n\n  constructor(message: string, parent?: HTMLElement) {\n    super(message)\n    Object.setPrototypeOf(this, new.target.prototype)\n    this.parent = parent\n  }\n\n  public toString(): string {\n    return this.message + ' Parent: [' + JSON.stringify(parent) + ']'\n  }\n}\n\ntype DmElement<T extends HTMLElement> = {\n  el: T\n}\n\nexport type DmButton = DmElement<HTMLButtonElement> & {\n  setLabel: Handler<string>\n  setDisabled: Handler<boolean>\n}\n\nexport type DmLabel = DmElement<HTMLElement> & {\n  setLabel: Handler<string>\n}\n\nexport type DmField = DmElement<HTMLElement> & {\n  input: DmElement<HTMLInputElement>\n  error: DmElement<HTMLElement>\n  validator: Validator\n  clearError: Handler<void>\n  setError: Handler<string>\n  // TODO: Value may be string | number\n  setInputValue: Handler<string>\n}\n\nexport type DmForm<T extends string> = DmElement<HTMLElement> & {\n  fields: Record<T, DmField>\n  error: DmElement<HTMLElement>\n  clearError: Handler<void>\n  clearAllErrors: Handler<void>\n  setError: Handler<string>\n  // TODO: Value may be string | number\n  getFormValues: FN<void, Record<T, string>>\n  setFormValues: Handler<Record<T, string>>\n  resetForm: Handler<void>\n  setFormDisabled: Handler<boolean>\n  setOnSubmit: FN<FN<Event, Promise<void>>, void>\n}\n\nconst scanFormFieldNames = (formElement: HTMLFormElement): ReadonlyArray<string> => {\n  // TODO: Field selector must be configurable\n  const formFieldElements = formElement.querySelectorAll('[data-dm-type=\"control\"]')\n  return Array.from(formFieldElements.values())\n    .map((el) => el.getAttribute('data-dm-name'))\n    .filter((name): name is string => !!name)\n}\n\nconst createFormError = (formElement: HTMLFormElement): HTMLElement => {\n  // TODO: Error selector must be configurable\n  const element = getElement('[data-dm-name=\"form_error\"]', formElement)\n  if (!element) {\n    throw new FormError('Form error element not found for form', formElement)\n  }\n  return element\n}\n\nconst createFieldInput = (fieldElement: HTMLElement): HTMLInputElement => {\n  // TODO: Field input selector must be configurable\n  const element = getInputElement('[data-dm-type=\"input\"]', fieldElement)\n  if (!element) {\n    throw new FormError('Form input element not found for: ', fieldElement)\n  }\n  return element\n}\n\nconst createFieldError = (fieldElement: HTMLElement): HTMLElement => {\n  // TODO: Field error selector must be configurable\n  const element = getElement('[data-dm-type=\"error\"]', fieldElement)\n  if (!element) {\n    throw new FormError('Form error element not found for: ', fieldElement)\n  }\n  return element\n}\n\nconst createFieldValidation = (inputElement: HTMLInputElement): Validator => {\n  const required = inputElement.hasAttribute('required')\n  const minLength = inputElement.getAttribute('minlength')\n  const maxLength = inputElement.getAttribute('maxlength')\n  const pattern = inputElement.getAttribute('pattern')\n  const min = inputElement.getAttribute('min')\n  const max = inputElement.getAttribute('max')\n\n  return (value) => {\n    if (required && !value) {\n      return 'required'\n    }\n    if (minLength && String(value).length < Number(minLength)) {\n      return 'minlength'\n    }\n    if (maxLength && String(value).length > Number(maxLength)) {\n      return 'maxlength'\n    }\n    if (pattern && !new RegExp(pattern).test(String(value))) {\n      return 'pattern'\n    }\n    if (min && Number(value) < Number(min)) {\n      return 'min'\n    }\n    if (max && Number(value) > Number(max)) {\n      return 'max'\n    }\n    return true\n  }\n}\n\nconst createFormField = (formElement: HTMLFormElement, name: string): DmField => {\n  // TODO: Field selector must be configurable\n  const fieldElement = getElement(`[data-dm-name=\"${name}\"]`, formElement)\n  if (!fieldElement) {\n    throw new FormError('Form field element not found by name: \"' + name, formElement)\n  }\n  const inputElement = createFieldInput(fieldElement)\n  const errorElement = createFieldError(fieldElement)\n  const validator: Validator = createFieldValidation(inputElement)\n\n  return {\n    el: fieldElement,\n    input: { el: inputElement },\n    error: { el: errorElement },\n    validator: validator,\n    clearError: () => (errorElement.textContent = ''),\n    setError: (error: string) => (errorElement.textContent = error),\n    setInputValue: (value: string) => (inputElement.value = value)\n  } satisfies DmField\n}\n\nexport const createForm = <T extends string>(\n  selector: string,\n  formName: T,\n  formErrorMessages: FormErrorMessages\n): DmForm<T> => {\n  console.debug('Creating form:', formName, selector)\n  const formElement = getFormElement(selector)\n  if (!formElement) {\n    throw new Error('Form element not found by selector: ' + selector)\n  }\n\n  // TODO: Must be optional!\n  const formErrorElement = createFormError(formElement)\n\n  const fieldNames = scanFormFieldNames(formElement)\n  console.debug('Fields scanned:', fieldNames)\n\n  const fieldElements: Record<string, DmField> = fieldNames\n    .map((name) => createFormField(formElement, name))\n    .reduce((acc, cur) => ({ ...acc, [cur.input.el.name]: cur }), {})\n\n  const getFormValues = (): Record<T, string> =>\n    Object.entries<DmField>(fieldElements)\n      .filter(([, instance]) => !!instance && instance.input.el.value.trim().length > 0)\n      .map(([name, instance]) => ({ [name]: instance.input.el.value }))\n      .reduce((acc, cur) => ({ ...acc, ...cur }), {}) as Record<T, string>\n\n  const setFormValues = (values: Record<T, string>): void => {\n    Object.entries<string>(values).forEach(([name, value]) => {\n      if (fieldElements[name]) {\n        fieldElements[name].setInputValue(value)\n      }\n    })\n  }\n\n  const resetForm = (): void => {\n    Object.values(fieldElements).forEach((field) => field.setInputValue(''))\n  }\n\n  const setFormDisabled = (disabled: boolean): void => {\n    Object.values(fieldElements).forEach((field) => (field.input.el.disabled = disabled))\n\n    Array.from(formElement.querySelectorAll('[data-dm-type=\"button\"]')).forEach((element) => {\n      if (element instanceof HTMLButtonElement) {\n        element.disabled = disabled\n      }\n      // Add \"disabled\" class to an element\n      if (disabled) {\n        element.classList.add('disabled')\n      } else {\n        element.classList.remove('disabled')\n      }\n    })\n  }\n\n  const setOnSubmit = (handler: (e: Event) => void): void =>\n    setupFormHandler(formElement, (e) => {\n      const errors = Object.entries(fieldElements)\n        .map(([name, field]) => ({ [name]: field.validator(field.input.el.value) }))\n        .reduce((acc, cur) => ({ ...acc, ...cur }), {})\n      const hasErrors = Object.values(errors).some((error) => error !== true)\n      if (hasErrors) {\n        console.error('Validation errors', errors)\n        Object.entries(errors).forEach(([name, error]) => {\n          if (error !== true) {\n            fieldElements[name].setError(formErrorMessages[error])\n          }\n        })\n        //formErrorElement.textContent = 'Form has errors!'\n      } else {\n        handler(e)\n      }\n    })\n\n  // TODO: Avoid this duplication\n  Array.from(formElement.querySelectorAll('[data-dm-disable=\"true\"]')).forEach((element) => {\n    if (element instanceof HTMLButtonElement) {\n      element.disabled = true\n    }\n    element.classList.add('disabled')\n  })\n\n  return {\n    el: formElement,\n    fields: fieldElements,\n    error: { el: formErrorElement },\n    clearError: () => (formErrorElement.textContent = ''),\n    clearAllErrors: () => {\n      formErrorElement.textContent = ''\n      Object.values(fieldElements).forEach((field) => field.clearError())\n    },\n    setError: (error: string) => (formErrorElement.textContent = error),\n    getFormValues,\n    setFormValues,\n    resetForm,\n    setFormDisabled,\n    setOnSubmit\n  }\n}\n\nexport const createButton = (buttonElement: HTMLButtonElement): DmButton =>\n  ({\n    el: buttonElement,\n    setLabel: (label: string) => (buttonElement.textContent = label),\n    setDisabled: (disabled: boolean) => (buttonElement.disabled = disabled)\n  }) satisfies DmButton\n\nexport const createLabel = (labelElement: HTMLElement): DmLabel =>\n  ({\n    el: labelElement,\n    setLabel: (label: string) => (labelElement.textContent = label)\n  }) satisfies DmLabel\n","export const getElement = <T extends HTMLElement = HTMLElement>(\n  selector: string,\n  parent?: HTMLElement\n): T | undefined => {\n  const el: HTMLElement | null = (parent ?? document).querySelector(selector)\n  if (el === null) {\n    console.error(`Element not found by selector: ${parent ? 'parent' : 'document'}.${selector}.`)\n    return undefined\n  } else {\n    return el as T\n  }\n}\n\nexport const getFormElement = (selector: string): HTMLFormElement | undefined => getElement<HTMLFormElement>(selector)\n\nexport const getInputElement = (selector: string, parent?: HTMLElement): HTMLInputElement | undefined =>\n  getElement<HTMLInputElement>(selector, parent)\n\nexport const setupFormHandler = (form: HTMLFormElement, handler: (e: Event) => void): void => {\n  form.action = ''\n  form.method = ''\n  form.onsubmit = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  // TODO: Remove all event listeners\n  form.addEventListener('submit', handler)\n}\n","import type { FN, Handler, NullableType } from './types'\nimport { hasValue } from './utils'\n\nexport class ApiError extends Error {\n  public readonly status: number\n  public readonly url: string\n  public readonly method: string\n  public readonly cause: string\n  public readonly response: Response\n\n  constructor(response: Response, cause: string) {\n    super(`Failed to fetch ${response.url}: ${response.status} ${response.statusText}: ${cause}`)\n    this.status = response.status\n    this.url = response.url\n    this.method = response.statusText\n    this.cause = cause\n    this.response = response\n  }\n}\n\nexport const getErrorFromResponse = async <T>(response: Response): Promise<T> => {\n  const responseText = await response.text()\n  console.log('Error body: ', responseText)\n  if (!responseText || responseText.length === 0) {\n    return undefined as unknown as T\n  } else {\n    return JSON.parse(responseText) as T\n  }\n}\n\nexport const fetchTyped = async <T>(url: string, init: RequestInit = { method: 'GET' }): Promise<T> => {\n  const response = await fetch(url, init)\n  if (!response.ok) {\n    throw new ApiError(response, 'Unsuccessful HTTP status')\n  } else {\n    const responseText = await response.text()\n    if (!responseText || responseText.length === 0) {\n      return undefined as unknown as Promise<T>\n    } else {\n      return JSON.parse(responseText) as Promise<T>\n    }\n  }\n}\n\nexport const getTyped = async <T>(url: string): Promise<T> => fetchTyped(url)\n\nexport const postTyped = async <T, R>(url: string, body: T): Promise<R> =>\n  fetchTyped(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n\nexport const uploadTyped =\n  <R>(url: string) =>\n  (file: File): Promise<R> => {\n    const data = new FormData()\n    data.append('file', file)\n\n    return fetchTyped<R>(url, {\n      method: 'POST',\n      body: data\n    })\n  }\n\nexport const fromFileList = (files: NullableType<FileList>): Array<File> => {\n  const result: Array<File> = []\n  if (hasValue(files)) {\n    for (const file of files) {\n      result.push(file)\n    }\n  }\n  return result\n}\n\nexport const uploadFilesList =\n  <TUploadResult>(\n    upload: FN<File, Promise<TUploadResult>>,\n    onFileUploadSuccess?: Handler<void>,\n    onFileUploadError?: Handler<unknown>\n  ): FN<Array<File>, Promise<Array<TUploadResult>>> =>\n  (files) =>\n    Promise.all(\n      files.map((file) =>\n        upload(file)\n          .then((result) => {\n            onFileUploadSuccess?.()\n            return result\n          })\n          .catch((e: unknown) => {\n            // eslint-disable-next-line no-console\n            console.error('File upload error', e)\n            onFileUploadError?.(e)\n            throw e\n          })\n      )\n    ).then((result) => result.filter(hasValue))\n\nexport const uploadTypedArray = <R>(url: string, files: Array<File>): Promise<Array<R>> =>\n  uploadFilesList<R>(uploadTyped<R>(url))(files)\n\nexport const uploadTypedFileList = <R>(url: string, files: FileList): Promise<Array<R>> =>\n  uploadTypedArray<R>(url, fromFileList(files))\n","import type { FN, NullableType } from './types'\n\nexport const isEmpty = <T>(value: NullableType<T>): value is null | undefined => value === null || value === undefined\nexport const hasValue = <T>(value: NullableType<T>): value is T => !isEmpty(value)\nexport const mapValue = <T, R>(value: T | undefined, f: FN<T, R>): R | undefined =>\n  hasValue(value) ? f(value) : undefined\nexport const getOrElse = <T>(value: NullableType<T>, defaultValue: T): T => (hasValue(value) ? value : defaultValue)\nexport const mapOrElse = <T, R>(value: NullableType<T>, f: FN<T, R>, defaultValue: R): R =>\n  hasValue(value) ? f(value) : defaultValue\n","import type { DmButton, DmForm, DmLabel } from './form'\nimport type { FormErrorMessages, Handler } from './types'\n\nexport type PageContext<F extends string, B extends string, L extends string> = {\n  buttons: Record<B, DmButton>\n  labels: Record<L, DmLabel>\n  forms: Record<F, DmForm<string>>\n  resetAll: Handler<void>\n}\n\nexport type FormHandlers = {\n  init?: Handler<DmForm<string>>\n  beforeSubmit?: Handler<DmForm<string>>\n  afterSubmit?: Handler<DmForm<string>>\n}\n\nexport type ElementConfig = {\n  selector: string\n}\n\nexport type FormConfig<F extends string, B extends string, L extends string> = {\n  onSubmit: <T extends Record<string, unknown>>(\n    data: T,\n    ctx: PageContext<F, B, L>,\n    success: Handler<void>,\n    fail: Handler<unknown>\n  ) => Promise<void>\n  onSuccess: (ctx: PageContext<F, B, L>) => void\n  onError: <T>(error: T, ctx: PageContext<F, B, L>) => void\n  errorMessages?: Partial<FormErrorMessages>\n} & ElementConfig\n\nexport type ButtonConfig<F extends string, B extends string, L extends string> = {\n  onClick: (ctx: PageContext<F, B, L>) => void\n} & ElementConfig\n\nexport type LabelConfig = ElementConfig\n\nexport type Config<F extends string, B extends string, L extends string> = {\n  /*\n  dom: {\n    idAttr: string\n    typeAttr: string\n    nameAttr: string\n    setFieldState: (selector: string, state: DmFieldState) => void\n  }\n  */\n  forms?: Record<F, FormConfig<F, B, L>>\n  buttons?: Record<B, ButtonConfig<F, B, L>>\n  labels?: Record<L, LabelConfig>\n  errorMessages?: FormErrorMessages\n  handlers?: FormHandlers\n  afterInit?: Handler<PageContext<F, B, L>>\n}\n"],"names":[],"version":3,"file":"module.js.map"}